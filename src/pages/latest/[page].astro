---
import { getCollection, getEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import SideMenu from "../../components/SideMenu.astro";

export async function getStaticPaths() {
	const maxArticlePerPage = 4;

	// ページ分割用関数
	const createPagerChunk = (array) => {
		const length = Math.ceil(array.length / maxArticlePerPage);
		return new Array(length)
			.fill(0)
			.map((_, i) =>
				array.slice(i * maxArticlePerPage, (i + 1) * maxArticlePerPage)
			);
	};
	
	const blogEntries = await getCollection("posts");
	blogEntries.sort((a,b)=>{
		return (Date.parse(b.data.created_at)) - (Date.parse(a.data.created_at))
	})

	
	// return用の配列を生成
	const staticPaths: {
		params: { page: number };
		props: { entries: any[] };
	}[] = [];

	// ページ分割用に配列のチャンクを生成
	const chunkedEntries = createPagerChunk(blogEntries);

	chunkedEntries.forEach((chunked, index) => {
		staticPaths.push({
			params: { page: index + 1 },
			props: { entries: chunked },
		});
	});

	return staticPaths;
}

const { entries } = Astro.props;
const { page } = Astro.params;
---

<Layout title={"最新記事一覧 (page. " + page + ")"}>
	<div class="lg:grid lg:grid-cols-12">
		<div
			class="lg:max-w-4xl
                bg-white
                shadow-sm
                rounded-lg
                lg:p-8
                lg: col-span-8
                p-4
				m-2"
		>
			<div class="prose-header mt-4 mb-12">
				<h1 class="text-3xl font-semibold mt-2">
						最新記事一覧<span class="ml-2 text-2xl"
						>(page. {page})</span
					>
				</h1>
			</div>

			<div>
				{
					entries.map((entry) => (
						<>
							<a
								class="group rounded-xl overflow-hidden  border-gray-100"
								href={"/contents/" + entry.slug}
							>
								<div class="sm:flex">
									<div class="flex-shrink-0 relative rounded-xl overflow-hidden w-full sm:w-56 h-44">
										{function(){
													if(typeof(entry.data.heroImage) === 'string')
														return (<img
																class="group-hover:scale-105 transition-transform duration-500 ease-in-out size-full absolute top-0 start-0 object-cover rounded-xl"
																src={entry.data.heroImage}
																alt={entry.data.title} />)
													return (<img
																class="group-hover:scale-105 transition-transform duration-500 ease-in-out size-full absolute top-0 start-0 object-cover rounded-xl"
																src="/img/noImg.jpg"
																alt={entry.data.title} />)
												}}
									</div>

									<div class="grow mt-4 sm:mt-0 sm:ms-6 px-4 sm:px-0">
										<h3 class="text-xl font-semibold text-gray-800 group-hover:text-gray-600">
											{entry.data.title}
										</h3>
										<p
												class="text-sm before:i-ri-folder-fill before:relative before:top-0.5 
												text-slate-500"
											>
												{function(){
													if(typeof(entry.data.category?.name) === 'string')
														return entry.data.category.name
													return 'カテゴリなし'
												}}
										</p>
										<p class="mt-3">
											{async function(){
												if (entry.data.description && entry.data.description !== '')
													return entry.data.description.slice(0,140)
												
											}}
										</p>
										<div class="flex items-stretch mt-2">
											<p
												class="text-sm before:i-ri-history-line before:relative before:top-0.5 before:mr-1
												text-slate-500 mr-2"
											>
												{entry.data.updated_at}
											</p>
											<p
												class="text-sm before:i-ri-edit-line before:relative before:top-0.5 before:mr-1
												text-slate-500"
											>
												{entry.data.created_at}
											</p>
										</div>
										<p class="mt-4 inline-flex items-center gap-x-1 text-primary decoration-2 hover:underline hover:text-accent font-medium">
											Read more <i class="i-ri-arrow-right-line" />
										</p>
									</div>
								</div>
							</a>
							<hr class="my-4" />
						</>
					))
				}
			</div>
		</div>
		<SideMenu />
	</div>
</Layout>
